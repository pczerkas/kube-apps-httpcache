name: Test

on:
  workflow_dispatch:
  push:
    branches:
      - 'master'
  pull_request:

env:
  REGISTRY: ghcr.io
  MAIN_DOCKERFILE: build/package/docker/Dockerfile
  IMAGE_BUILDKIT: moby/buildkit:v0.12.4

  # defines squid proxy to be used during build
  SQUID_HOST:
  SQUID_HTTP_PORT:
  SQUID_HTTPS_PORT:
  # defines docker registry proxy to be used during build
  DOCKER_REGISTRY_PROXY_HOST:
  DOCKER_REGISTRY_PROXY_PORT:
  # comma separated list of domains to bypass proxy
  NO_PROXY:

  GITLAB_CI:

jobs:
  verify_helm:
    name: Verify Helm chart
    runs-on: ubuntu-latest
    strategy:
      matrix:
        helm:
          - '3.1.2'
          - '3.14.0'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'true'

      - name: Set up Helm
        run: |
          wget https://get.helm.sh/helm-v${{ matrix.helm }}-linux-amd64.tar.gz -O /tmp/helm.tar.gz
          tar xzf /tmp/helm.tar.gz -C /tmp --strip-components=1
          chmod +x /tmp/helm

      - name: Test template rendering
        run: /tmp/helm template ./chart/kube-apps-httpcache/.

      - name: Lint chart
        run: /tmp/helm lint ./chart/kube-apps-httpcache/

  verify_build:
    name: Verify Build
    runs-on: ubuntu-latest
    env:
      GORELEASER_VERSION: "1.23.0"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'true'

      #debug
      # - name: Update
      #   run: |
      #     sudo apt-get update
      # - name: Setup upterm session
      #   uses: lhotari/action-upterm@v1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true

      # chart-releaser latest tag has non-semver format, need to convert it
      - name: Set GoReleaser current tag
        uses: ./.github/actions/set-goreleaser-current-tag
      - name: Generate CACHEBUST variable
        run: echo CACHEBUST=$(date +%s) >> $GITHUB_ENV
      - name: Run GoReleaser (on github)
        if: ${{ !env.ACT }}
        uses: goreleaser/goreleaser-action@v5
        env:
          CACHEBUST: ${{ env.CACHEBUST }}
        with:
          version: ${{ env.GORELEASER_VERSION }}
          args: release -f build/ci/.goreleaser.yml --snapshot --skip=publish --clean --debug --verbose
      - name: Run GoReleaser (on act, on gitlab)
        if: ${{ env.ACT && env.GITLAB_CI == 'true' }}
        uses: goreleaser/goreleaser-action@v5
        env:
          CACHEBUST: ${{ env.CACHEBUST }}
        with:
          version: ${{ env.GORELEASER_VERSION }}
          args: release -f build/ci/.goreleaser.yml --snapshot --skip=publish --clean --debug --verbose
      - name: Run GoReleaser (on act, locally)
        if: ${{ env.ACT && (env.GITLAB_CI == 'false' || !env.GITLAB_CI) }}
        uses: goreleaser/goreleaser-action@v5
        env:
          SQUID_HOST: ${{ env.SQUID_HOST }}
          SQUID_HTTP_PORT: ${{ env.SQUID_HTTP_PORT }}
          SQUID_HTTPS_PORT: ${{ env.SQUID_HTTPS_PORT }}
          DOCKER_REGISTRY_PROXY_HOST: ${{ env.DOCKER_REGISTRY_PROXY_HOST }}
          DOCKER_REGISTRY_PROXY_PORT: ${{ env.DOCKER_REGISTRY_PROXY_PORT }}
          NO_PROXY: ${{ env.NO_PROXY }}
          CACHEBUST: ${{ env.CACHEBUST }}
        with:
          version: ${{ env.GORELEASER_VERSION }}
          args: release -f build/ci/act/.goreleaser.yml --snapshot --skip=publish --clean --debug --verbose

  e2e:
    name: E2E
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          #- flyci-macos-large-latest-m1
          #- flyci-macos-large-latest-m2
    runs-on:
      - ${{ matrix.os }}
    env:
      HELM_VERSION: 3.14.0
      REPOSITORY: local/kube-apps-httpcache
      TAG: "ci"
      KIND_CLUSTER_NAME: e2e
      KIND_NODE_IMAGE: kindest/node:v1.29.0
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'true'

      # TODO: fix this, if possible
      # - name: Set up Docker (on macos)
      #   if: ${{ matrix.os == 'flyci-macos-large-latest-m1' || matrix.os == 'flyci-macos-large-latest-m2' }}
      #   run: |
      #     brew install docker --cask

      #     brew install docker-buildx
      #     mkdir -p ~/.docker/cli-plugins
      #     ln -sfn /opt/homebrew/opt/docker-buildx/bin/docker-buildx ~/.docker/cli-plugins/docker-buildx

      #     sudo ln -s ~/Library/Containers/com.docker.docker/Data/docker.raw.sock /var/run/docker.sock
      #     DOCKER_HOST=unix:///var/run/docker.sock docker ps # test that it works

      #     # Start Docker.app if not already running
      #     if ! pgrep -f Docker.app; then
      #       open -a /Applications/Docker.app
      #       # Wait for Docker to be ready
      #       while ! docker info >/dev/null 2>&1; do sleep 1; done
      #     fi

      #     # brew install docker --cask
      #     # #brew install docker docker-compose colima
      #     # brew install colima
      #     brew services start colima
      #     # brew install docker-buildx
      #     # mkdir -p ~/.docker/cli-plugins
      #     # ln -sfn /opt/homebrew/opt/docker-buildx/bin/docker-buildx ~/.docker/cli-plugins/docker-buildx
      #     # colima start

      - name: Set up Docker Buildx (on ubuntu, on github)
        if: ${{ matrix.os == 'ubuntu-latest' && !env.ACT }}
        uses: docker/setup-buildx-action@v3
      - name: Set up Docker Buildx (on ubuntu, on act, using docker registry proxy and squid proxy)
        if: ${{ matrix.os == 'ubuntu-latest' && env.ACT && env.DOCKER_REGISTRY_PROXY_HOST != '' && env.SQUID_HOST != '' }}
        uses: docker/setup-buildx-action@v3
        with:
          config-inline: |
            # registry configures a new Docker register used for cache import or output.
            debug = true
            [registry."docker.io"]
              # mirror configuration to handle path in case a mirror registry requires a /project path rather than just a host:port
              #mirrors = ["yourmirror.local:5000", "core.harbor.domain/proxy.docker.io"]
              http = true
              insecure = true
              ca=["/etc/squid/CA.pem","/etc/docker-registry-proxy/CA.crt"]
              #[[registry."docker.io".keypair]]
              #  key="/etc/config/key.pem"
              #  cert="/etc/config/cert.pem"
          driver-opts: |
            "image=${{ env.IMAGE_BUILDKIT }}"
            "env.http_proxy=${{ env.DOCKER_REGISTRY_PROXY_HOST }}:${{ env.DOCKER_REGISTRY_PROXY_PORT }}"
            "env.https_proxy=${{ env.DOCKER_REGISTRY_PROXY_HOST }}:${{ env.DOCKER_REGISTRY_PROXY_PORT }}"
            "env.no_proxy='${{ env.NO_PROXY }}'"
      - name: Set up Docker Buildx (on ubuntu, on act, using docker registry proxy)
        if: ${{ matrix.os == 'ubuntu-latest' && env.ACT && env.DOCKER_REGISTRY_PROXY_HOST != '' && env.SQUID_HOST == '' }}
        uses: docker/setup-buildx-action@v3
        with:
          config-inline: |
            # registry configures a new Docker register used for cache import or output.
            debug = true
            [registry."docker.io"]
              # mirror configuration to handle path in case a mirror registry requires a /project path rather than just a host:port
              #mirrors = ["yourmirror.local:5000", "core.harbor.domain/proxy.docker.io"]
              http = true
              insecure = true
              ca=["/etc/docker-registry-proxy/CA.crt"]
              #[[registry."docker.io".keypair]]
              #  key="/etc/config/key.pem"
              #  cert="/etc/config/cert.pem"
          driver-opts: |
            "image=${{ env.IMAGE_BUILDKIT }}"
            "env.http_proxy=${{ env.DOCKER_REGISTRY_PROXY_HOST }}:${{ env.DOCKER_REGISTRY_PROXY_PORT }}"
            "env.https_proxy=${{ env.DOCKER_REGISTRY_PROXY_HOST }}:${{ env.DOCKER_REGISTRY_PROXY_PORT }}"
            "env.no_proxy='${{ env.NO_PROXY }}'"
      - name: Set up Docker Buildx (on ubuntu, on act, not using any proxy)
        if: ${{ matrix.os == 'ubuntu-latest' && env.ACT && env.DOCKER_REGISTRY_PROXY_HOST == '' && env.SQUID_HOST == '' }}
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            "image=${{ env.IMAGE_BUILDKIT }}"

      - name: Build image (on ubuntu, using squid proxy)
        if: ${{ matrix.os == 'ubuntu-latest' && env.SQUID_HOST != '' }}
        run: |
          DOCKER_BUILDKIT=1 \
            http_proxy=http://${{ env.SQUID_HOST }}:${{ env.SQUID_HTTP_PORT }} \
            https_proxy=http://${{ env.SQUID_HOST }}:${{ env.SQUID_HTTPS_PORT }} \
            no_proxy=${{ env.NO_PROXY }} \
            docker buildx build \
              --progress plain \
              -f $MAIN_DOCKERFILE \
              --build-arg SQUID_HOST=$SQUID_HOST \
              --build-arg SQUID_HTTP_PORT=$SQUID_HTTP_PORT \
              --build-arg SQUID_HTTPS_PORT=$SQUID_HTTPS_PORT \
              --build-arg NO_PROXY=$NO_PROXY \
              --tag $REPOSITORY:$TAG \
              --provenance false \
              --load \
              .
      - name: Build image (on ubuntu, not using squid proxy)
        if: ${{ matrix.os == 'ubuntu-latest' && env.SQUID_HOST == '' }}
        run: |
          DOCKER_BUILDKIT=1 \
            docker buildx build \
              --progress plain \
              -f $MAIN_DOCKERFILE \
              --tag $REPOSITORY:$TAG \
              --provenance false \
              --load \
              .
      # TODO: fix this, if possible
      # - name: Build image (on macos)
      #   if: ${{ matrix.os == 'flyci-macos-large-latest-m1' || matrix.os == 'flyci-macos-large-latest-m2' && matrix.os == 'ubuntu-latest' }}
      #   run: |
      #     #ls -al /usr/local/lib/docker/cli-plugins/
      #     ls -al ~/.docker/cli-plugins/
      #     DOCKER_BUILDKIT=1 \
      #       docker buildx build \
      #         -f $MAIN_DOCKERFILE \
      #         --tag $REPOSITORY:$TAG \
      #         --provenance false \
      #         --load \
      #         .

      - uses: azure/setup-helm@v3
        with:
            version: ${{ env.HELM_VERSION}}
            token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1
        with:
          cluster_name: ${{ env.KIND_CLUSTER_NAME }}
          version: v0.20.0
          config: build/ci/kind-config.yaml
          node_image: ${{ env.KIND_NODE_IMAGE }}
          verbosity: 99

      - name: Install test backend
        run: |
          kubectl get nodes
          kubectl get events -A --sort-by='.metadata.creationTimestamp'

          kubectl apply \
            -f test/test-backend.yaml

          sleep 10

          kubectl wait \
            pods --selector app=test-backend \
            --for condition=Ready \
            --timeout=5m30s \
          || \
            {
              kubectl get events -A --sort-by='.metadata.creationTimestamp' \
              && kubectl get pods -A -o wide \
              && exit 1; \
            }

          kubectl get events -A --sort-by='.metadata.creationTimestamp'

      - name: Install Helm chart
        run: |
          docker images
          kind load docker-image $REPOSITORY:$TAG --name $KIND_CLUSTER_NAME

          helm install \
            -f test/chart-values.yaml \
            -f build/ci/chart-values-override.yaml \
            kube-apps-httpcache \
            ./chart/kube-apps-httpcache \
            --timeout 7m0s \
            --wait \
            --debug

          kubectl get pods -A
          kubectl get events -A --sort-by='.metadata.creationTimestamp'

      - name: Install Ripgrep
        run: |
          sudo apt-get -y update
          sudo apt-get -y install ripgrep

      - name: Run Tests
        run: |
          build/ci/tests/e2e.sh
